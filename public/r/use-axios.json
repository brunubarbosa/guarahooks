{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "use-axios",
  "type": "registry:hook",
  "title": "UseAxios",
  "description": "A customizable hook for making HTTP requests with Axios",
  "files": [
    {
      "path": "registry/hooks/use-axios.tsx",
      "content": "\"use client\";\n\nimport { useCallback, useEffect, useRef, useState } from \"react\";\nimport axios, { AxiosError, AxiosInstance, AxiosRequestConfig, AxiosResponse } from \"axios\";\n\n// Types\nexport interface UseAxiosProps {\n  /**\n   * Base URL for axios instance\n   */\n  baseURL?: string;\n  /**\n   * Default headers for axios instance\n   */\n  headers?: Record<string, string>;\n  /**\n   * Default timeout in milliseconds\n   */\n  timeout?: number;\n  /**\n   * Initial config for axios instance\n   */\n  config?: AxiosRequestConfig;\n}\n\nexport interface UseAxiosReturn {\n  /**\n   * Axios instance that can be used directly\n   */\n  instance: AxiosInstance;\n  /**\n   * Loading state for requests\n   */\n  loading: boolean;\n  /**\n   * Error from the most recent request\n   */\n  error: AxiosError | null;\n  /**\n   * Data from the most recent request\n   */\n  data: any;\n  /**\n   * Execute a GET request\n   */\n  get: <T = any>(url: string, config?: AxiosRequestConfig) => Promise<AxiosResponse<T>>;\n  /**\n   * Execute a POST request\n   */\n  post: <T = any>(url: string, data?: any, config?: AxiosRequestConfig) => Promise<AxiosResponse<T>>;\n  /**\n   * Execute a PUT request\n   */\n  put: <T = any>(url: string, data?: any, config?: AxiosRequestConfig) => Promise<AxiosResponse<T>>;\n  /**\n   * Execute a DELETE request\n   */\n  delete: <T = any>(url: string, config?: AxiosRequestConfig) => Promise<AxiosResponse<T>>;\n  /**\n   * Execute a PATCH request\n   */\n  patch: <T = any>(url: string, data?: any, config?: AxiosRequestConfig) => Promise<AxiosResponse<T>>;\n  /**\n   * Reset error state\n   */\n  resetError: () => void;\n}\n\nexport function useAxios({\n  baseURL = \"\",\n  headers = {},\n  timeout = 10000,\n  config = {},\n}: UseAxiosProps = {}): UseAxiosReturn {\n  const [loading, setLoading] = useState<boolean>(false);\n  const [error, setError] = useState<AxiosError | null>(null);\n  const [data, setData] = useState<any>(null);\n  \n  // Create a ref to store the axios instance to prevent recreation on each render\n  const instanceRef = useRef<AxiosInstance | null>(null);\n  \n  // Initialize axios instance\n  useEffect(() => {\n    instanceRef.current = axios.create({\n      baseURL,\n      headers,\n      timeout,\n      ...config,\n    });\n    \n    return () => {\n      instanceRef.current = null;\n    };\n  }, [baseURL, timeout, config]);\n  \n  // Get the current instance\n  const getInstance = useCallback((): AxiosInstance => {\n    if (!instanceRef.current) {\n      instanceRef.current = axios.create({\n        baseURL,\n        headers,\n        timeout,\n        ...config,\n      });\n    }\n    return instanceRef.current;\n  }, [baseURL, headers, timeout, config]);\n  \n  // Helper to handle request execution\n  const executeRequest = useCallback(async <T = any>(\n    method: string,\n    url: string,\n    data?: any,\n    customConfig?: AxiosRequestConfig\n  ): Promise<AxiosResponse<T>> => {\n    setLoading(true);\n    setError(null);\n    \n    try {\n      const instance = getInstance();\n      \n      const response = await instance.request<T>({\n        method,\n        url,\n        data,\n        ...customConfig,\n      });\n      \n      setData(response.data);\n      return response;\n    } catch (err) {\n      const axiosError = err as AxiosError;\n      setError(axiosError);\n      throw axiosError;\n    } finally {\n      setLoading(false);\n    }\n  }, [getInstance]);\n  \n  // Request methods\n  const get = useCallback(<T = any>(url: string, config?: AxiosRequestConfig) => {\n    return executeRequest<T>(\"get\", url, undefined, config);\n  }, [executeRequest]);\n  \n  const post = useCallback(<T = any>(url: string, data?: any, config?: AxiosRequestConfig) => {\n    return executeRequest<T>(\"post\", url, data, config);\n  }, [executeRequest]);\n  \n  const put = useCallback(<T = any>(url: string, data?: any, config?: AxiosRequestConfig) => {\n    return executeRequest<T>(\"put\", url, data, config);\n  }, [executeRequest]);\n  \n  const del = useCallback(<T = any>(url: string, config?: AxiosRequestConfig) => {\n    return executeRequest<T>(\"delete\", url, undefined, config);\n  }, [executeRequest]);\n  \n  const patch = useCallback(<T = any>(url: string, data?: any, config?: AxiosRequestConfig) => {\n    return executeRequest<T>(\"patch\", url, data, config);\n  }, [executeRequest]);\n  \n  const resetError = useCallback(() => {\n    setError(null);\n  }, []);\n  \n  return {\n    instance: getInstance(),\n    loading,\n    error,\n    data,\n    get,\n    post,\n    put,\n    delete: del,\n    patch,\n    resetError,\n  };\n} ",
      "type": "registry:hook",
      "target": "hooks/h3-use/use-axios.tsx"
    }
  ],
  "categories": ["utilities"]
}
