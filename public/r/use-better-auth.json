{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "use-better-auth",
  "type": "registry:hook",
  "title": "UseBetterAuth",
  "description": "Simple authentication flow using fetch.",
  "files": [
    {
      "path": "registry/hooks/use-better-auth.tsx",
      "content": "'use client';\n\nimport { useCallback, useEffect, useState } from 'react';\n\nexport interface StorageLike {\n  getItem(key: string): string | null;\n  setItem(key: string, value: string): void;\n  removeItem(key: string): void;\n}\n\nexport interface BetterAuthResponse<TUser> {\n  token: string;\n  user: TUser;\n}\n\nexport interface DefaultCredentials {\n  email: string;\n  password: string;\n}\n\nexport interface UseBetterAuthReturn<\n  TUser,\n  TCredentials extends Record<string, string | number | boolean>,\n> {\n  token: string | null;\n  user: TUser | null;\n  loading: boolean;\n  error: Error | null;\n  isAuthenticated: boolean;\n  login: (credentials: TCredentials) => Promise<void>;\n  logout: () => void;\n  refresh: () => Promise<void>;\n  updateUser: (user: TUser, token?: string) => void;\n  clearError: () => void;\n}\n\nexport interface UseBetterAuthOptions<\n  TUser,\n  TCredentials extends Record<string, string | number | boolean>,\n> {\n  storageKey?: string;\n  storage?: StorageLike;\n  loginUrl?: string;\n  refreshUrl?: string;\n  logoutUrl?: string;\n  refreshInterval?: number;\n  onAuthChange?: (token: string | null, user: TUser | null) => void;\n  fetcher?: (\n    credentials: TCredentials,\n    url: string,\n  ) => Promise<BetterAuthResponse<TUser>>;\n}\n\nexport function useBetterAuth<\n  TUser,\n  TCredentials extends Record<\n    string,\n    string | number | boolean\n  > = DefaultCredentials,\n>(\n  options: UseBetterAuthOptions<TUser, TCredentials> = {},\n): UseBetterAuthReturn<TUser, TCredentials> {\n  const {\n    storageKey = 'better-auth',\n    storage = typeof window !== 'undefined' ? localStorage : undefined,\n    loginUrl = '/api/login',\n    refreshUrl,\n    logoutUrl,\n    refreshInterval,\n    onAuthChange,\n    fetcher,\n  } = options;\n  const [token, setToken] = useState<string | null>(() => {\n    if (typeof window === 'undefined' || !storage) return null;\n    return storage.getItem(`${storageKey}:token`);\n  });\n  const [user, setUser] = useState<TUser | null>(() => {\n    if (typeof window === 'undefined' || !storage) return null;\n    const saved = storage.getItem(`${storageKey}:user`);\n    return saved ? (JSON.parse(saved) as TUser) : null;\n  });\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState<Error | null>(null);\n\n  const login = useCallback(\n    async (credentials: TCredentials) => {\n      setLoading(true);\n      setError(null);\n      try {\n        const fetchFn =\n          fetcher ??\n          (async (\n            creds: TCredentials,\n            url: string,\n          ): Promise<BetterAuthResponse<TUser>> => {\n            const res = await fetch(url, {\n              method: 'POST',\n              headers: { 'Content-Type': 'application/json' },\n              body: JSON.stringify(creds),\n            });\n\n            if (!res.ok) throw new Error('Login failed');\n\n            return (await res.json()) as BetterAuthResponse<TUser>;\n          });\n\n        const json = await fetchFn(credentials, loginUrl);\n        setToken(json.token);\n        setUser(json.user);\n        if (storage) {\n          storage.setItem(`${storageKey}:token`, json.token);\n          storage.setItem(`${storageKey}:user`, JSON.stringify(json.user));\n        }\n        onAuthChange?.(json.token, json.user);\n      } catch (err) {\n        setError(err as Error);\n        throw err;\n      } finally {\n        setLoading(false);\n      }\n    },\n    [storageKey, loginUrl, fetcher],\n  );\n\n  const logout = useCallback(() => {\n    if (logoutUrl && token) {\n      fetch(logoutUrl, {\n        method: 'POST',\n        headers: { Authorization: `Bearer ${token}` },\n      }).catch(() => {\n        /* ignore network errors on logout */\n      });\n    }\n    setToken(null);\n    setUser(null);\n    if (storage) {\n      storage.removeItem(`${storageKey}:token`);\n      storage.removeItem(`${storageKey}:user`);\n    }\n    onAuthChange?.(null, null);\n  }, [logoutUrl, token, storageKey, storage, onAuthChange]);\n\n  const refresh = useCallback(async () => {\n    if (!token || !refreshUrl) return;\n    setLoading(true);\n    setError(null);\n    try {\n      const res = await fetch(refreshUrl, {\n        headers: { Authorization: `Bearer ${token}` },\n      });\n\n      if (!res.ok) throw new Error('Refresh failed');\n\n      const json = (await res.json()) as BetterAuthResponse<TUser>;\n      setToken(json.token);\n      setUser(json.user);\n\n      if (storage) {\n        storage.setItem(`${storageKey}:token`, json.token);\n        storage.setItem(`${storageKey}:user`, JSON.stringify(json.user));\n      }\n      onAuthChange?.(json.token, json.user);\n    } catch (err) {\n      setError(err as Error);\n      throw err;\n    } finally {\n      setLoading(false);\n    }\n  }, [token, refreshUrl, storageKey, storage, onAuthChange]);\n\n  useEffect(() => {\n    if (!token || !storage) return;\n    storage.setItem(`${storageKey}:token`, token);\n    onAuthChange?.(token, user);\n  }, [token, storageKey, storage, onAuthChange, user]);\n\n  useEffect(() => {\n    if (user === null || !storage) return;\n    storage.setItem(`${storageKey}:user`, JSON.stringify(user));\n    onAuthChange?.(token, user);\n  }, [user, storageKey, storage, onAuthChange, token]);\n\n  useEffect(() => {\n    if (!refreshInterval || !refreshUrl) return;\n    const id = setInterval(refresh, refreshInterval);\n    return () => clearInterval(id);\n  }, [refreshInterval, refreshUrl, refresh]);\n\n  const updateUser = useCallback(\n    (nextUser: TUser, nextToken?: string) => {\n      setUser(nextUser);\n      if (nextToken !== undefined) {\n        setToken(nextToken);\n        if (storage) {\n          storage.setItem(`${storageKey}:token`, nextToken);\n        }\n      }\n      if (storage) {\n        storage.setItem(`${storageKey}:user`, JSON.stringify(nextUser));\n      }\n      onAuthChange?.(nextToken ?? token, nextUser);\n    },\n    [storageKey, storage, onAuthChange, token],\n  );\n\n  const clearError = useCallback(() => {\n    setError(null);\n  }, []);\n\n  return {\n    token,\n    user,\n    loading,\n    error,\n    isAuthenticated: token !== null,\n    login,\n    logout,\n    refresh,\n    updateUser,\n    clearError,\n  };\n}\n",
      "type": "registry:hook",
      "target": "hooks/guarahooks/use-better-auth.tsx"
    }
  ],
  "categories": ["auth"]
}
