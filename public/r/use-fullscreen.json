{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "use-fullscreen",
  "type": "registry:hook",
  "title": "UseFullscreen",
  "description": "Enters and exits fullscreen mode.",
  "files": [
    {
      "path": "registry/hooks/use-fullscreen.tsx",
      "content": "'use client';\n\nimport { useCallback, useEffect, useRef, useState } from 'react';\n\n// Type for the ref that can be passed to the hook\nexport type FullscreenRef = React.RefObject<HTMLElement> | null;\n\n// Utility functions for cross-browser Fullscreen API\nfunction getFullscreenElement(): Element | null {\n  return (\n    document.fullscreenElement ||\n    // @ts-ignore\n    document.webkitFullscreenElement ||\n    // @ts-ignore\n    document.mozFullScreenElement ||\n    // @ts-ignore\n    document.msFullscreenElement ||\n    null\n  );\n}\n\nfunction requestFullscreen(element: HTMLElement) {\n  if (element.requestFullscreen) return element.requestFullscreen();\n  // @ts-ignore\n  if (element.webkitRequestFullscreen) return element.webkitRequestFullscreen();\n  // @ts-ignore\n  if (element.mozRequestFullScreen) return element.mozRequestFullScreen();\n  // @ts-ignore\n  if (element.msRequestFullscreen) return element.msRequestFullscreen();\n}\n\nfunction exitFullscreen() {\n  if (document.exitFullscreen) return document.exitFullscreen();\n  // @ts-ignore\n  if (document.webkitExitFullscreen) return document.webkitExitFullscreen();\n  // @ts-ignore\n  if (document.mozCancelFullScreen) return document.mozCancelFullScreen();\n  // @ts-ignore\n  if (document.msExitFullscreen) return document.msExitFullscreen();\n}\n\nfunction addFullscreenListener(cb: () => void) {\n  document.addEventListener('fullscreenchange', cb);\n  document.addEventListener('webkitfullscreenchange', cb);\n  document.addEventListener('mozfullscreenchange', cb);\n  document.addEventListener('MSFullscreenChange', cb);\n}\n\nfunction removeFullscreenListener(cb: () => void) {\n  document.removeEventListener('fullscreenchange', cb);\n  document.removeEventListener('webkitfullscreenchange', cb);\n  document.removeEventListener('mozfullscreenchange', cb);\n  document.removeEventListener('MSFullscreenChange', cb);\n}\n\nexport function useFullscreen(\n  ref: FullscreenRef = null,\n): [boolean, () => void, () => void] {\n  const [isFullscreen, setIsFullscreen] = useState<boolean>(false);\n  const refCached = useRef(ref);\n\n  useEffect(() => {\n    refCached.current = ref;\n  }, [ref]);\n\n  const handleChange = useCallback(() => {\n    const current = refCached.current?.current ?? document.documentElement;\n    setIsFullscreen(getFullscreenElement() === current);\n  }, []);\n\n  useEffect(() => {\n    addFullscreenListener(handleChange);\n    handleChange(); // Initial check\n    return () => {\n      removeFullscreenListener(handleChange);\n    };\n  }, [handleChange]);\n\n  const enter = useCallback(() => {\n    const el = refCached.current?.current ?? document.documentElement;\n    if (el && getFullscreenElement() !== el) {\n      requestFullscreen(el);\n    }\n  }, []);\n\n  const exit = useCallback(() => {\n    if (getFullscreenElement()) {\n      exitFullscreen();\n    }\n  }, []);\n\n  return [isFullscreen, enter, exit];\n}\n",
      "type": "registry:hook",
      "target": "hooks/guarahooks/use-fullscreen.tsx"
    }
  ],
  "categories": ["ui-and-dom"]
}
