/* eslint-disable @typescript-eslint/ban-ts-comment */
/* eslint-disable @typescript-eslint/no-explicit-any */
// @ts-nocheck
// This file is autogenerated by scripts/build-registry.ts
// Do not edit this file directly.

import * as React from 'react';

export const Index: Record<string, any> = {
  'use-window-size': {
    name: 'use-window-size',
    description: "Tracks the current window's dimensions.",
    type: 'registry:hook',
    registryDependencies: undefined,
    files: [
      {
        path: 'registry/hooks/use-window-size.tsx',
        type: 'registry:hook',
        target: 'hooks/h3-use/use-window-size.tsx',
      },
    ],
    component: React.lazy(async () => {
      const mod = await import('@/registry/hooks/use-window-size.tsx');
      const exportName =
        Object.keys(mod).find(
          (key) =>
            typeof mod[key] === 'function' || typeof mod[key] === 'object',
        ) || item.name;
      return { default: mod.default || mod[exportName] };
    }),
    meta: undefined,
  },
  'use-media': {
    name: 'use-media',
    description: 'Checks if the current window matches a media query.',
    type: 'registry:hook',
    registryDependencies: undefined,
    files: [
      {
        path: 'registry/hooks/use-media.tsx',
        type: 'registry:hook',
        target: 'hooks/h3-use/use-media.tsx',
      },
    ],
    component: React.lazy(async () => {
      const mod = await import('@/registry/hooks/use-media.tsx');
      const exportName =
        Object.keys(mod).find(
          (key) =>
            typeof mod[key] === 'function' || typeof mod[key] === 'object',
        ) || item.name;
      return { default: mod.default || mod[exportName] };
    }),
    meta: undefined,
  },
  'use-mouse': {
    name: 'use-mouse',
    description: 'Tracks the mouse position in the element and document.',
    type: 'registry:hook',
    registryDependencies: undefined,
    files: [
      {
        path: 'registry/hooks/use-mouse.tsx',
        type: 'registry:hook',
        target: 'hooks/h3-use/use-mouse.tsx',
      },
    ],
    component: React.lazy(async () => {
      const mod = await import('@/registry/hooks/use-mouse.tsx');
      const exportName =
        Object.keys(mod).find(
          (key) =>
            typeof mod[key] === 'function' || typeof mod[key] === 'object',
        ) || item.name;
      return { default: mod.default || mod[exportName] };
    }),
    meta: undefined,
  },
  'use-keypress': {
    name: 'use-keypress',
    description: 'Tracks keyboard combinations and key presses.',
    type: 'registry:hook',
    registryDependencies: undefined,
    files: [
      {
        path: 'registry/hooks/use-keypress.tsx',
        type: 'registry:hook',
        target: 'hooks/h3-use/use-keypress.tsx',
      },
    ],
    component: React.lazy(async () => {
      const mod = await import('@/registry/hooks/use-keypress.tsx');
      const exportName =
        Object.keys(mod).find(
          (key) =>
            typeof mod[key] === 'function' || typeof mod[key] === 'object',
        ) || item.name;
      return { default: mod.default || mod[exportName] };
    }),
    meta: undefined,
  },
  'use-orientation': {
    name: 'use-orientation',
    description: 'Tracks the current orientation of the device.',
    type: 'registry:hook',
    registryDependencies: undefined,
    files: [
      {
        path: 'registry/hooks/use-orientation.tsx',
        type: 'registry:hook',
        target: 'hooks/h3-use/use-orientation.tsx',
      },
    ],
    component: React.lazy(async () => {
      const mod = await import('@/registry/hooks/use-orientation.tsx');
      const exportName =
        Object.keys(mod).find(
          (key) =>
            typeof mod[key] === 'function' || typeof mod[key] === 'object',
        ) || item.name;
      return { default: mod.default || mod[exportName] };
    }),
    meta: undefined,
  },
  'use-toggle': {
    name: 'use-toggle',
    description: 'Controls a boolean state with a toggler.',
    type: 'registry:hook',
    registryDependencies: undefined,
    files: [
      {
        path: 'registry/hooks/use-toggle.tsx',
        type: 'registry:hook',
        target: 'hooks/h3-use/use-toggle.tsx',
      },
    ],
    component: React.lazy(async () => {
      const mod = await import('@/registry/hooks/use-toggle.tsx');
      const exportName =
        Object.keys(mod).find(
          (key) =>
            typeof mod[key] === 'function' || typeof mod[key] === 'object',
        ) || item.name;
      return { default: mod.default || mod[exportName] };
    }),
    meta: undefined,
  },
  'use-set': {
    name: 'use-set',
    description: 'Manages a Set of items with ease.',
    type: 'registry:hook',
    registryDependencies: undefined,
    files: [
      {
        path: 'registry/hooks/use-set.tsx',
        type: 'registry:hook',
        target: 'hooks/h3-use/use-set.tsx',
      },
    ],
    component: React.lazy(async () => {
      const mod = await import('@/registry/hooks/use-set.tsx');
      const exportName =
        Object.keys(mod).find(
          (key) =>
            typeof mod[key] === 'function' || typeof mod[key] === 'object',
        ) || item.name;
      return { default: mod.default || mod[exportName] };
    }),
    meta: undefined,
  },
  'use-local-storage': {
    name: 'use-local-storage',
    description: 'Synchronizes a value with localStorage.',
    type: 'registry:hook',
    registryDependencies: undefined,
    files: [
      {
        path: 'registry/hooks/use-local-storage.tsx',
        type: 'registry:hook',
        target: 'hooks/h3-use/use-local-storage.tsx',
      },
    ],
    component: React.lazy(async () => {
      const mod = await import('@/registry/hooks/use-local-storage.tsx');
      const exportName =
        Object.keys(mod).find(
          (key) =>
            typeof mod[key] === 'function' || typeof mod[key] === 'object',
        ) || item.name;
      return { default: mod.default || mod[exportName] };
    }),
    meta: undefined,
  },
  'use-session-storage': {
    name: 'use-session-storage',
    description: 'Synchronizes a value with sessionStorage.',
    type: 'registry:hook',
    registryDependencies: undefined,
    files: [
      {
        path: 'registry/hooks/use-session-storage.tsx',
        type: 'registry:hook',
        target: 'hooks/h3-use/use-session-storage.tsx',
      },
    ],
    component: React.lazy(async () => {
      const mod = await import('@/registry/hooks/use-session-storage.tsx');
      const exportName =
        Object.keys(mod).find(
          (key) =>
            typeof mod[key] === 'function' || typeof mod[key] === 'object',
        ) || item.name;
      return { default: mod.default || mod[exportName] };
    }),
    meta: undefined,
  },
  'use-cookie': {
    name: 'use-cookie',
    description: 'Synchronizes a value with cookies.',
    type: 'registry:hook',
    registryDependencies: undefined,
    files: [
      {
        path: 'registry/hooks/use-cookie.tsx',
        type: 'registry:hook',
        target: 'hooks/h3-use/use-cookie.tsx',
      },
    ],
    component: React.lazy(async () => {
      const mod = await import('@/registry/hooks/use-cookie.tsx');
      const exportName =
        Object.keys(mod).find(
          (key) =>
            typeof mod[key] === 'function' || typeof mod[key] === 'object',
        ) || item.name;
      return { default: mod.default || mod[exportName] };
    }),
    meta: undefined,
  },
  'use-copy-to-clipboard': {
    name: 'use-copy-to-clipboard',
    description: 'Copies text to the clipboard.',
    type: 'registry:hook',
    registryDependencies: undefined,
    files: [
      {
        path: 'registry/hooks/use-copy-to-clipboard.tsx',
        type: 'registry:hook',
        target: 'hooks/h3-use/use-copy-to-clipboard.tsx',
      },
    ],
    component: React.lazy(async () => {
      const mod = await import('@/registry/hooks/use-copy-to-clipboard.tsx');
      const exportName =
        Object.keys(mod).find(
          (key) =>
            typeof mod[key] === 'function' || typeof mod[key] === 'object',
        ) || item.name;
      return { default: mod.default || mod[exportName] };
    }),
    meta: undefined,
  },
  'use-debounce-callback': {
    name: 'use-debounce-callback',
    description: 'Debounce the call of a function.',
    type: 'registry:hook',
    registryDependencies: undefined,
    files: [
      {
        path: 'registry/hooks/use-debounce-callback.tsx',
        type: 'registry:hook',
        target: 'hooks/h3-use/use-debounce-callback.tsx',
      },
    ],
    component: React.lazy(async () => {
      const mod = await import('@/registry/hooks/use-debounce-callback.tsx');
      const exportName =
        Object.keys(mod).find(
          (key) =>
            typeof mod[key] === 'function' || typeof mod[key] === 'object',
        ) || item.name;
      return { default: mod.default || mod[exportName] };
    }),
    meta: undefined,
  },
  'use-debounce-state': {
    name: 'use-debounce-state',
    description: 'Debounce the state update.',
    type: 'registry:hook',
    registryDependencies: undefined,
    files: [
      {
        path: 'registry/hooks/use-debounce-state.tsx',
        type: 'registry:hook',
        target: 'hooks/h3-use/use-debounce-state.tsx',
      },
    ],
    component: React.lazy(async () => {
      const mod = await import('@/registry/hooks/use-debounce-state.tsx');
      const exportName =
        Object.keys(mod).find(
          (key) =>
            typeof mod[key] === 'function' || typeof mod[key] === 'object',
        ) || item.name;
      return { default: mod.default || mod[exportName] };
    }),
    meta: undefined,
  },
  'use-click-outside': {
    name: 'use-click-outside',
    description: 'Detects clicks outside of a referenced element.',
    type: 'registry:hook',
    registryDependencies: undefined,
    files: [
      {
        path: 'registry/hooks/use-click-outside.tsx',
        type: 'registry:hook',
        target: 'hooks/h3-use/use-click-outside.tsx',
      },
    ],
    component: React.lazy(async () => {
      const mod = await import('@/registry/hooks/use-click-outside.tsx');
      const exportName =
        Object.keys(mod).find(
          (key) =>
            typeof mod[key] === 'function' || typeof mod[key] === 'object',
        ) || item.name;
      return { default: mod.default || mod[exportName] };
    }),
    meta: undefined,
  },
  'use-on-mount': {
    name: 'use-on-mount',
    description: 'Executes a function only once when the component is mounted.',
    type: 'registry:hook',
    registryDependencies: undefined,
    files: [
      {
        path: 'registry/hooks/use-on-mount.tsx',
        type: 'registry:hook',
        target: 'hooks/h3-use/use-on-mount.tsx',
      },
    ],
    component: React.lazy(async () => {
      const mod = await import('@/registry/hooks/use-on-mount.tsx');
      const exportName =
        Object.keys(mod).find(
          (key) =>
            typeof mod[key] === 'function' || typeof mod[key] === 'object',
        ) || item.name;
      return { default: mod.default || mod[exportName] };
    }),
    meta: undefined,
  },
  'use-on-unmount': {
    name: 'use-on-unmount',
    description:
      'Executes a function only once when the component is unmounted.',
    type: 'registry:hook',
    registryDependencies: undefined,
    files: [
      {
        path: 'registry/hooks/use-on-unmount.tsx',
        type: 'registry:hook',
        target: 'hooks/h3-use/use-on-unmount.tsx',
      },
    ],
    component: React.lazy(async () => {
      const mod = await import('@/registry/hooks/use-on-unmount.tsx');
      const exportName =
        Object.keys(mod).find(
          (key) =>
            typeof mod[key] === 'function' || typeof mod[key] === 'object',
        ) || item.name;
      return { default: mod.default || mod[exportName] };
    }),
    meta: undefined,
  },
  'use-did-update': {
    name: 'use-did-update',
    description:
      'Executes a function when the component is updated, but not when it is mounted.',
    type: 'registry:hook',
    registryDependencies: undefined,
    files: [
      {
        path: 'registry/hooks/use-did-update.tsx',
        type: 'registry:hook',
        target: 'hooks/h3-use/use-did-update.tsx',
      },
    ],
    component: React.lazy(async () => {
      const mod = await import('@/registry/hooks/use-did-update.tsx');
      const exportName =
        Object.keys(mod).find(
          (key) =>
            typeof mod[key] === 'function' || typeof mod[key] === 'object',
        ) || item.name;
      return { default: mod.default || mod[exportName] };
    }),
    meta: undefined,
  },
  'use-os': {
    name: 'use-os',
    description: "Detects the user's operating system.",
    type: 'registry:hook',
    registryDependencies: undefined,
    files: [
      {
        path: 'registry/hooks/use-os.tsx',
        type: 'registry:hook',
        target: 'hooks/h3-use/use-os.tsx',
      },
    ],
    component: React.lazy(async () => {
      const mod = await import('@/registry/hooks/use-os.tsx');
      const exportName =
        Object.keys(mod).find(
          (key) =>
            typeof mod[key] === 'function' || typeof mod[key] === 'object',
        ) || item.name;
      return { default: mod.default || mod[exportName] };
    }),
    meta: undefined,
  },
  'use-idle': {
    name: 'use-idle',
    description: 'Detects if the user is idle.',
    type: 'registry:hook',
    registryDependencies: undefined,
    files: [
      {
        path: 'registry/hooks/use-idle.tsx',
        type: 'registry:hook',
        target: 'hooks/h3-use/use-idle.tsx',
      },
    ],
    component: React.lazy(async () => {
      const mod = await import('@/registry/hooks/use-idle.tsx');
      const exportName =
        Object.keys(mod).find(
          (key) =>
            typeof mod[key] === 'function' || typeof mod[key] === 'object',
        ) || item.name;
      return { default: mod.default || mod[exportName] };
    }),
    meta: undefined,
  },
  'use-fullscreen': {
    name: 'use-fullscreen',
    description: 'Enters and exits fullscreen mode.',
    type: 'registry:hook',
    registryDependencies: undefined,
    files: [
      {
        path: 'registry/hooks/use-fullscreen.tsx',
        type: 'registry:hook',
        target: 'hooks/h3-use/use-fullscreen.tsx',
      },
    ],
    component: React.lazy(async () => {
      const mod = await import('@/registry/hooks/use-fullscreen.tsx');
      const exportName =
        Object.keys(mod).find(
          (key) =>
            typeof mod[key] === 'function' || typeof mod[key] === 'object',
        ) || item.name;
      return { default: mod.default || mod[exportName] };
    }),
    meta: undefined,
  },
  'use-confirm': {
    name: 'use-confirm',
    description: 'Manages a confirmation dialog.',
    type: 'registry:hook',
    registryDependencies: undefined,
    files: [
      {
        path: 'registry/hooks/use-confirm.tsx',
        type: 'registry:hook',
        target: 'hooks/h3-use/use-confirm.tsx',
      },
    ],
    component: React.lazy(async () => {
      const mod = await import('@/registry/hooks/use-confirm.tsx');
      const exportName =
        Object.keys(mod).find(
          (key) =>
            typeof mod[key] === 'function' || typeof mod[key] === 'object',
        ) || item.name;
      return { default: mod.default || mod[exportName] };
    }),
    meta: undefined,
  },
  'use-notifications': {
    name: 'use-notifications',
    description: 'Manages browser notifications.',
    type: 'registry:hook',
    registryDependencies: undefined,
    files: [
      {
        path: 'registry/hooks/use-notifications.tsx',
        type: 'registry:hook',
        target: 'hooks/h3-use/use-notifications.tsx',
      },
    ],
    component: React.lazy(async () => {
      const mod = await import('@/registry/hooks/use-notifications.tsx');
      const exportName =
        Object.keys(mod).find(
          (key) =>
            typeof mod[key] === 'function' || typeof mod[key] === 'object',
        ) || item.name;
      return { default: mod.default || mod[exportName] };
    }),
    meta: undefined,
  },
  'use-page-leave': {
    name: 'use-page-leave',
    description: 'Detects when the user tries to leave the page.',
    type: 'registry:hook',
    registryDependencies: undefined,
    files: [
      {
        path: 'registry/hooks/use-page-leave.tsx',
        type: 'registry:hook',
        target: 'hooks/h3-use/use-page-leave.tsx',
      },
    ],
    component: React.lazy(async () => {
      const mod = await import('@/registry/hooks/use-page-leave.tsx');
      const exportName =
        Object.keys(mod).find(
          (key) =>
            typeof mod[key] === 'function' || typeof mod[key] === 'object',
        ) || item.name;
      return { default: mod.default || mod[exportName] };
    }),
    meta: undefined,
  },
  'use-window-size-demo': {
    name: 'use-window-size-demo',
    description: "use-window-size's hook in action.",
    type: 'registry:example',
    registryDependencies: ['card', 'https://h3-use.com/r/use-window-size.json'],
    files: [
      {
        path: 'registry/example/use-window-size-demo.tsx',
        type: 'registry:example',
        target: 'components/example/use-window-size-demo.tsx',
      },
    ],
    component: React.lazy(async () => {
      const mod = await import('@/registry/example/use-window-size-demo.tsx');
      const exportName =
        Object.keys(mod).find(
          (key) =>
            typeof mod[key] === 'function' || typeof mod[key] === 'object',
        ) || item.name;
      return { default: mod.default || mod[exportName] };
    }),
    meta: undefined,
  },
  'use-media-demo': {
    name: 'use-media-demo',
    description: "use-media's hook in action.",
    type: 'registry:example',
    registryDependencies: ['card', 'https://h3-use.com/r/use-media.json'],
    files: [
      {
        path: 'registry/example/use-media-demo.tsx',
        type: 'registry:example',
        target: 'components/example/use-media-demo.tsx',
      },
    ],
    component: React.lazy(async () => {
      const mod = await import('@/registry/example/use-media-demo.tsx');
      const exportName =
        Object.keys(mod).find(
          (key) =>
            typeof mod[key] === 'function' || typeof mod[key] === 'object',
        ) || item.name;
      return { default: mod.default || mod[exportName] };
    }),
    meta: undefined,
  },
  'use-mouse-demo': {
    name: 'use-mouse-demo',
    description: "use-mouse's hook in action.",
    type: 'registry:example',
    registryDependencies: [
      'checkbox',
      'card',
      'https://h3-use.com/r/use-mouse.json',
    ],
    files: [
      {
        path: 'registry/example/use-mouse-demo.tsx',
        type: 'registry:example',
        target: 'components/example/use-mouse-demo.tsx',
      },
    ],
    component: React.lazy(async () => {
      const mod = await import('@/registry/example/use-mouse-demo.tsx');
      const exportName =
        Object.keys(mod).find(
          (key) =>
            typeof mod[key] === 'function' || typeof mod[key] === 'object',
        ) || item.name;
      return { default: mod.default || mod[exportName] };
    }),
    meta: undefined,
  },
  'use-click-outside-demo': {
    name: 'use-click-outside-demo',
    description: "use-click-outside's hook in action.",
    type: 'registry:example',
    registryDependencies: [
      'card',
      'https://h3-use.com/r/use-click-outside.json',
    ],
    files: [
      {
        path: 'registry/example/use-click-outside-demo.tsx',
        type: 'registry:example',
        target: 'components/example/use-click-outside-demo.tsx',
      },
    ],
    component: React.lazy(async () => {
      const mod = await import('@/registry/example/use-click-outside-demo.tsx');
      const exportName =
        Object.keys(mod).find(
          (key) =>
            typeof mod[key] === 'function' || typeof mod[key] === 'object',
        ) || item.name;
      return { default: mod.default || mod[exportName] };
    }),
    meta: undefined,
  },
  'use-keypress-demo': {
    name: 'use-keypress-demo',
    description: "use-keypress's hook in action.",
    type: 'registry:example',
    registryDependencies: ['card', 'https://h3-use.com/r/use-keypress.json'],
    files: [
      {
        path: 'registry/example/use-keypress-demo.tsx',
        type: 'registry:example',
        target: 'components/example/use-keypress-demo.tsx',
      },
    ],
    component: React.lazy(async () => {
      const mod = await import('@/registry/example/use-keypress-demo.tsx');
      const exportName =
        Object.keys(mod).find(
          (key) =>
            typeof mod[key] === 'function' || typeof mod[key] === 'object',
        ) || item.name;
      return { default: mod.default || mod[exportName] };
    }),
    meta: undefined,
  },
  'use-orientation-demo': {
    name: 'use-orientation-demo',
    description: "use-orientation's hook in action.",
    type: 'registry:example',
    registryDependencies: ['card', 'https://h3-use.com/r/use-orientation.json'],
    files: [
      {
        path: 'registry/example/use-orientation-demo.tsx',
        type: 'registry:example',
        target: 'components/example/use-orientation-demo.tsx',
      },
    ],
    component: React.lazy(async () => {
      const mod = await import('@/registry/example/use-orientation-demo.tsx');
      const exportName =
        Object.keys(mod).find(
          (key) =>
            typeof mod[key] === 'function' || typeof mod[key] === 'object',
        ) || item.name;
      return { default: mod.default || mod[exportName] };
    }),
    meta: undefined,
  },
  'use-toggle-demo': {
    name: 'use-toggle-demo',
    description: "use-toggle's hook in action.",
    type: 'registry:example',
    registryDependencies: [
      'card',
      'button',
      'https://h3-use.com/r/use-toggle.json',
    ],
    files: [
      {
        path: 'registry/example/use-toggle-demo.tsx',
        type: 'registry:example',
        target: 'components/example/use-toggle-demo.tsx',
      },
    ],
    component: React.lazy(async () => {
      const mod = await import('@/registry/example/use-toggle-demo.tsx');
      const exportName =
        Object.keys(mod).find(
          (key) =>
            typeof mod[key] === 'function' || typeof mod[key] === 'object',
        ) || item.name;
      return { default: mod.default || mod[exportName] };
    }),
    meta: undefined,
  },
  'use-set-demo': {
    name: 'use-set-demo',
    description: "use-set's hook in action.",
    type: 'registry:example',
    registryDependencies: [
      'card',
      'button',
      'input',
      'https://h3-use.com/r/use-set.json',
    ],
    files: [
      {
        path: 'registry/example/use-set-demo.tsx',
        type: 'registry:example',
        target: 'components/example/use-set-demo.tsx',
      },
    ],
    component: React.lazy(async () => {
      const mod = await import('@/registry/example/use-set-demo.tsx');
      const exportName =
        Object.keys(mod).find(
          (key) =>
            typeof mod[key] === 'function' || typeof mod[key] === 'object',
        ) || item.name;
      return { default: mod.default || mod[exportName] };
    }),
    meta: undefined,
  },
  'use-local-storage-demo': {
    name: 'use-local-storage-demo',
    description: "use-local-storage's hook in action.",
    type: 'registry:example',
    registryDependencies: [
      'card',
      'input',
      'label',
      'https://h3-use.com/r/use-local-storage.json',
    ],
    files: [
      {
        path: 'registry/example/use-local-storage-demo.tsx',
        type: 'registry:example',
        target: 'components/example/use-local-storage-demo.tsx',
      },
    ],
    component: React.lazy(async () => {
      const mod = await import('@/registry/example/use-local-storage-demo.tsx');
      const exportName =
        Object.keys(mod).find(
          (key) =>
            typeof mod[key] === 'function' || typeof mod[key] === 'object',
        ) || item.name;
      return { default: mod.default || mod[exportName] };
    }),
    meta: undefined,
  },
  'use-session-storage-demo': {
    name: 'use-session-storage-demo',
    description: "use-session-storage's hook in action.",
    type: 'registry:example',
    registryDependencies: [
      'card',
      'button',
      'input',
      'label',
      'https://h3-use.com/r/use-session-storage.json',
    ],
    files: [
      {
        path: 'registry/example/use-session-storage-demo.tsx',
        type: 'registry:example',
        target: 'components/example/use-session-storage-demo.tsx',
      },
    ],
    component: React.lazy(async () => {
      const mod = await import(
        '@/registry/example/use-session-storage-demo.tsx'
      );
      const exportName =
        Object.keys(mod).find(
          (key) =>
            typeof mod[key] === 'function' || typeof mod[key] === 'object',
        ) || item.name;
      return { default: mod.default || mod[exportName] };
    }),
    meta: undefined,
  },
  'use-cookie-demo': {
    name: 'use-cookie-demo',
    description: "use-cookie's hook in action.",
    type: 'registry:example',
    registryDependencies: [
      'card',
      'input',
      'button',
      'https://h3-use.com/r/use-cookie.json',
    ],
    files: [
      {
        path: 'registry/example/use-cookie-demo.tsx',
        type: 'registry:example',
        target: 'components/example/use-cookie-demo.tsx',
      },
    ],
    component: React.lazy(async () => {
      const mod = await import('@/registry/example/use-cookie-demo.tsx');
      const exportName =
        Object.keys(mod).find(
          (key) =>
            typeof mod[key] === 'function' || typeof mod[key] === 'object',
        ) || item.name;
      return { default: mod.default || mod[exportName] };
    }),
    meta: undefined,
  },
  'use-copy-to-clipboard-demo': {
    name: 'use-copy-to-clipboard-demo',
    description: "use-copy-to-clipboard's hook in action.",
    type: 'registry:example',
    registryDependencies: [
      'card',
      'button',
      'input',
      'https://h3-use.com/r/use-copy-to-clipboard.json',
    ],
    files: [
      {
        path: 'registry/example/use-copy-to-clipboard-demo.tsx',
        type: 'registry:example',
        target: 'components/example/use-copy-to-clipboard-demo.tsx',
      },
    ],
    component: React.lazy(async () => {
      const mod = await import(
        '@/registry/example/use-copy-to-clipboard-demo.tsx'
      );
      const exportName =
        Object.keys(mod).find(
          (key) =>
            typeof mod[key] === 'function' || typeof mod[key] === 'object',
        ) || item.name;
      return { default: mod.default || mod[exportName] };
    }),
    meta: undefined,
  },
  'use-debounce-callback-demo': {
    name: 'use-debounce-callback-demo',
    description: "use-debounce-callback's hook in action.",
    type: 'registry:example',
    registryDependencies: [
      'card',
      'input',
      'https://h3-use.com/r/use-debounce-callback.json',
    ],
    files: [
      {
        path: 'registry/example/use-debounce-callback-demo.tsx',
        type: 'registry:example',
        target: 'components/example/use-debounce-callback-demo.tsx',
      },
    ],
    component: React.lazy(async () => {
      const mod = await import(
        '@/registry/example/use-debounce-callback-demo.tsx'
      );
      const exportName =
        Object.keys(mod).find(
          (key) =>
            typeof mod[key] === 'function' || typeof mod[key] === 'object',
        ) || item.name;
      return { default: mod.default || mod[exportName] };
    }),
    meta: undefined,
  },
  'use-debounce-state-demo': {
    name: 'use-debounce-state-demo',
    description: "use-debounce-state's hook in action.",
    type: 'registry:example',
    registryDependencies: [
      'card',
      'input',
      'https://h3-use.com/r/use-debounce-state.json',
    ],
    files: [
      {
        path: 'registry/example/use-debounce-state-demo.tsx',
        type: 'registry:example',
        target: 'components/example/use-debounce-state-demo.tsx',
      },
    ],
    component: React.lazy(async () => {
      const mod = await import(
        '@/registry/example/use-debounce-state-demo.tsx'
      );
      const exportName =
        Object.keys(mod).find(
          (key) =>
            typeof mod[key] === 'function' || typeof mod[key] === 'object',
        ) || item.name;
      return { default: mod.default || mod[exportName] };
    }),
    meta: undefined,
  },
  'use-on-mount-demo': {
    name: 'use-on-mount-demo',
    description: "use-on-mount's hook in action.",
    type: 'registry:example',
    registryDependencies: ['card', 'https://h3-use.com/r/use-on-mount.json'],
    files: [
      {
        path: 'registry/example/use-on-mount-demo.tsx',
        type: 'registry:example',
        target: 'components/example/use-on-mount-demo.tsx',
      },
    ],
    component: React.lazy(async () => {
      const mod = await import('@/registry/example/use-on-mount-demo.tsx');
      const exportName =
        Object.keys(mod).find(
          (key) =>
            typeof mod[key] === 'function' || typeof mod[key] === 'object',
        ) || item.name;
      return { default: mod.default || mod[exportName] };
    }),
    meta: undefined,
  },
  'use-on-unmount-demo': {
    name: 'use-on-unmount-demo',
    description: "use-on-unmount's hook in action.",
    type: 'registry:example',
    registryDependencies: [
      'card',
      'button',
      'sonner',
      'https://h3-use.com/r/use-on-unmount.json',
    ],
    files: [
      {
        path: 'registry/example/use-on-unmount-demo.tsx',
        type: 'registry:example',
        target: 'components/example/use-on-unmount-demo.tsx',
      },
    ],
    component: React.lazy(async () => {
      const mod = await import('@/registry/example/use-on-unmount-demo.tsx');
      const exportName =
        Object.keys(mod).find(
          (key) =>
            typeof mod[key] === 'function' || typeof mod[key] === 'object',
        ) || item.name;
      return { default: mod.default || mod[exportName] };
    }),
    meta: undefined,
  },
  'use-did-update-demo': {
    name: 'use-did-update-demo',
    description: "use-did-update's hook in action.",
    type: 'registry:example',
    registryDependencies: [
      'card',
      'button',
      'https://h3-use.com/r/use-did-update.json',
    ],
    files: [
      {
        path: 'registry/example/use-did-update-demo.tsx',
        type: 'registry:example',
        target: 'components/example/use-did-update-demo.tsx',
      },
    ],
    component: React.lazy(async () => {
      const mod = await import('@/registry/example/use-did-update-demo.tsx');
      const exportName =
        Object.keys(mod).find(
          (key) =>
            typeof mod[key] === 'function' || typeof mod[key] === 'object',
        ) || item.name;
      return { default: mod.default || mod[exportName] };
    }),
    meta: undefined,
  },
  'use-os-demo': {
    name: 'use-os-demo',
    description: "use-os's hook in action.",
    type: 'registry:example',
    registryDependencies: ['card', 'https://h3-use.com/r/use-os.json'],
    files: [
      {
        path: 'registry/example/use-os-demo.tsx',
        type: 'registry:example',
        target: 'components/example/use-os-demo.tsx',
      },
    ],
    component: React.lazy(async () => {
      const mod = await import('@/registry/example/use-os-demo.tsx');
      const exportName =
        Object.keys(mod).find(
          (key) =>
            typeof mod[key] === 'function' || typeof mod[key] === 'object',
        ) || item.name;
      return { default: mod.default || mod[exportName] };
    }),
    meta: undefined,
  },
  'use-idle-demo': {
    name: 'use-idle-demo',
    description: "use-idle's hook in action.",
    type: 'registry:example',
    registryDependencies: [
      'card',
      'badge',
      'button',
      'https://h3-use.com/r/use-idle.json',
    ],
    files: [
      {
        path: 'registry/example/use-idle-demo.tsx',
        type: 'registry:example',
        target: 'components/example/use-idle-demo.tsx',
      },
    ],
    component: React.lazy(async () => {
      const mod = await import('@/registry/example/use-idle-demo.tsx');
      const exportName =
        Object.keys(mod).find(
          (key) =>
            typeof mod[key] === 'function' || typeof mod[key] === 'object',
        ) || item.name;
      return { default: mod.default || mod[exportName] };
    }),
    meta: undefined,
  },
  'use-fullscreen-demo': {
    name: 'use-fullscreen-demo',
    description: "use-fullscreen's hook in action.",
    type: 'registry:example',
    registryDependencies: [
      'card',
      'button',
      'https://h3-use.com/r/use-fullscreen.json',
    ],
    files: [
      {
        path: 'registry/example/use-fullscreen-demo.tsx',
        type: 'registry:example',
        target: 'components/example/use-fullscreen-demo.tsx',
      },
    ],
    component: React.lazy(async () => {
      const mod = await import('@/registry/example/use-fullscreen-demo.tsx');
      const exportName =
        Object.keys(mod).find(
          (key) =>
            typeof mod[key] === 'function' || typeof mod[key] === 'object',
        ) || item.name;
      return { default: mod.default || mod[exportName] };
    }),
    meta: undefined,
  },
  'use-confirm-demo': {
    name: 'use-confirm-demo',
    description: "use-confirm's hook in action.",
    type: 'registry:example',
    registryDependencies: [
      'card',
      'button',
      'https://h3-use.com/r/use-confirm.json',
    ],
    files: [
      {
        path: 'registry/example/use-confirm-demo.tsx',
        type: 'registry:example',
        target: 'components/example/use-confirm-demo.tsx',
      },
    ],
    component: React.lazy(async () => {
      const mod = await import('@/registry/example/use-confirm-demo.tsx');
      const exportName =
        Object.keys(mod).find(
          (key) =>
            typeof mod[key] === 'function' || typeof mod[key] === 'object',
        ) || item.name;
      return { default: mod.default || mod[exportName] };
    }),
    meta: undefined,
  },
  'use-notifications-demo': {
    name: 'use-notifications-demo',
    description: "use-notifications's hook in action.",
    type: 'registry:example',
    registryDependencies: [
      'card',
      'alert',
      'button',
      'badge',
      'lucide-react',
      'https://h3-use.com/r/use-notifications.json',
    ],
    files: [
      {
        path: 'registry/example/use-notifications-demo.tsx',
        type: 'registry:example',
        target: 'components/example/use-notifications-demo.tsx',
      },
    ],
    component: React.lazy(async () => {
      const mod = await import('@/registry/example/use-notifications-demo.tsx');
      const exportName =
        Object.keys(mod).find(
          (key) =>
            typeof mod[key] === 'function' || typeof mod[key] === 'object',
        ) || item.name;
      return { default: mod.default || mod[exportName] };
    }),
    meta: undefined,
  },
  'use-page-leave-demo': {
    name: 'use-page-leave-demo',
    description: "use-page-leave's hook in action.",
    type: 'registry:example',
    registryDependencies: [
      'card',
      'button',
      'badge',
      'https://h3-use.com/r/use-page-leave.json',
    ],
    files: [
      {
        path: 'registry/example/use-page-leave-demo.tsx',
        type: 'registry:example',
        target: 'components/example/use-page-leave-demo.tsx',
      },
    ],
    component: React.lazy(async () => {
      const mod = await import('@/registry/example/use-page-leave-demo.tsx');
      const exportName =
        Object.keys(mod).find(
          (key) =>
            typeof mod[key] === 'function' || typeof mod[key] === 'object',
        ) || item.name;
      return { default: mod.default || mod[exportName] };
    }),
    meta: undefined,
  },
};
