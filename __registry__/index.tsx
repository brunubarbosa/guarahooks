/* eslint-disable @typescript-eslint/ban-ts-comment */
/* eslint-disable @typescript-eslint/no-explicit-any */
// @ts-nocheck
// This file is autogenerated by scripts/build-registry.ts
// Do not edit this file directly.

import * as React from 'react';

export const Index: Record<string, any> = {
  'use-window-size': {
    name: 'use-window-size',
    description: "Tracks the current window's dimensions.",
    type: 'registry:hook',
    registryDependencies: undefined,
    files: [
      {
        path: 'registry/hooks/use-window-size.tsx',
        type: 'registry:hook',
        target: 'hooks/h3-use/use-window-size.tsx',
      },
    ],
    component: React.lazy(async () => {
      const mod = await import('@/registry/hooks/use-window-size.tsx');
      const exportName =
        Object.keys(mod).find(
          (key) =>
            typeof mod[key] === 'function' || typeof mod[key] === 'object',
        ) || item.name;
      return { default: mod.default || mod[exportName] };
    }),
    meta: undefined,
  },
  'use-media': {
    name: 'use-media',
    description: 'Checks if the current window matches a media query.',
    type: 'registry:hook',
    registryDependencies: undefined,
    files: [
      {
        path: 'registry/hooks/use-media.tsx',
        type: 'registry:hook',
        target: 'hooks/h3-use/use-media.tsx',
      },
    ],
    component: React.lazy(async () => {
      const mod = await import('@/registry/hooks/use-media.tsx');
      const exportName =
        Object.keys(mod).find(
          (key) =>
            typeof mod[key] === 'function' || typeof mod[key] === 'object',
        ) || item.name;
      return { default: mod.default || mod[exportName] };
    }),
    meta: undefined,
  },
  'use-mouse': {
    name: 'use-mouse',
    description: 'Tracks the mouse position in the element and document.',
    type: 'registry:hook',
    registryDependencies: undefined,
    files: [
      {
        path: 'registry/hooks/use-mouse.tsx',
        type: 'registry:hook',
        target: 'hooks/h3-use/use-mouse.tsx',
      },
    ],
    component: React.lazy(async () => {
      const mod = await import('@/registry/hooks/use-mouse.tsx');
      const exportName =
        Object.keys(mod).find(
          (key) =>
            typeof mod[key] === 'function' || typeof mod[key] === 'object',
        ) || item.name;
      return { default: mod.default || mod[exportName] };
    }),
    meta: undefined,
  },
  'use-keypress': {
    name: 'use-keypress',
    description: 'Tracks keyboard combinations and key presses.',
    type: 'registry:hook',
    registryDependencies: undefined,
    files: [
      {
        path: 'registry/hooks/use-keypress.tsx',
        type: 'registry:hook',
        target: 'hooks/h3-use/use-keypress.tsx',
      },
    ],
    component: React.lazy(async () => {
      const mod = await import('@/registry/hooks/use-keypress.tsx');
      const exportName =
        Object.keys(mod).find(
          (key) =>
            typeof mod[key] === 'function' || typeof mod[key] === 'object',
        ) || item.name;
      return { default: mod.default || mod[exportName] };
    }),
    meta: undefined,
  },
  'use-orientation': {
    name: 'use-orientation',
    description: 'Tracks the current orientation of the device.',
    type: 'registry:hook',
    registryDependencies: undefined,
    files: [
      {
        path: 'registry/hooks/use-orientation.tsx',
        type: 'registry:hook',
        target: 'hooks/h3-use/use-orientation.tsx',
      },
    ],
    component: React.lazy(async () => {
      const mod = await import('@/registry/hooks/use-orientation.tsx');
      const exportName =
        Object.keys(mod).find(
          (key) =>
            typeof mod[key] === 'function' || typeof mod[key] === 'object',
        ) || item.name;
      return { default: mod.default || mod[exportName] };
    }),
    meta: undefined,
  },
  'use-toggle': {
    name: 'use-toggle',
    description: 'Controls a boolean state with a toggler.',
    type: 'registry:hook',
    registryDependencies: undefined,
    files: [
      {
        path: 'registry/hooks/use-toggle.tsx',
        type: 'registry:hook',
        target: 'hooks/h3-use/use-toggle.tsx',
      },
    ],
    component: React.lazy(async () => {
      const mod = await import('@/registry/hooks/use-toggle.tsx');
      const exportName =
        Object.keys(mod).find(
          (key) =>
            typeof mod[key] === 'function' || typeof mod[key] === 'object',
        ) || item.name;
      return { default: mod.default || mod[exportName] };
    }),
    meta: undefined,
  },
  'use-set': {
    name: 'use-set',
    description: 'Manages a Set of items with ease.',
    type: 'registry:hook',
    registryDependencies: undefined,
    files: [
      {
        path: 'registry/hooks/use-set.tsx',
        type: 'registry:hook',
        target: 'hooks/h3-use/use-set.tsx',
      },
    ],
    component: React.lazy(async () => {
      const mod = await import('@/registry/hooks/use-set.tsx');
      const exportName =
        Object.keys(mod).find(
          (key) =>
            typeof mod[key] === 'function' || typeof mod[key] === 'object',
        ) || item.name;
      return { default: mod.default || mod[exportName] };
    }),
    meta: undefined,
  },
  'use-local-storage': {
    name: 'use-local-storage',
    description: 'Synchronizes a value with localStorage.',
    type: 'registry:hook',
    registryDependencies: undefined,
    files: [
      {
        path: 'registry/hooks/use-local-storage.tsx',
        type: 'registry:hook',
        target: 'hooks/h3-use/use-local-storage.tsx',
      },
    ],
    component: React.lazy(async () => {
      const mod = await import('@/registry/hooks/use-local-storage.tsx');
      const exportName =
        Object.keys(mod).find(
          (key) =>
            typeof mod[key] === 'function' || typeof mod[key] === 'object',
        ) || item.name;
      return { default: mod.default || mod[exportName] };
    }),
    meta: undefined,
  },
  'use-session-storage': {
    name: 'use-session-storage',
    description: 'Synchronizes a value with sessionStorage.',
    type: 'registry:hook',
    registryDependencies: undefined,
    files: [
      {
        path: 'registry/hooks/use-session-storage.tsx',
        type: 'registry:hook',
        target: 'hooks/h3-use/use-session-storage.tsx',
      },
    ],
    component: React.lazy(async () => {
      const mod = await import('@/registry/hooks/use-session-storage.tsx');
      const exportName =
        Object.keys(mod).find(
          (key) =>
            typeof mod[key] === 'function' || typeof mod[key] === 'object',
        ) || item.name;
      return { default: mod.default || mod[exportName] };
    }),
    meta: undefined,
  },
  'use-window-size-demo': {
    name: 'use-window-size-demo',
    description: "use-window-size's hook in action.",
    type: 'registry:example',
    registryDependencies: ['https://h3-use.com/r/use-window-size.json'],
    files: [
      {
        path: 'registry/example/use-window-size-demo.tsx',
        type: 'registry:example',
        target: 'components/example/use-window-size-demo.tsx',
      },
    ],
    component: React.lazy(async () => {
      const mod = await import('@/registry/example/use-window-size-demo.tsx');
      const exportName =
        Object.keys(mod).find(
          (key) =>
            typeof mod[key] === 'function' || typeof mod[key] === 'object',
        ) || item.name;
      return { default: mod.default || mod[exportName] };
    }),
    meta: undefined,
  },
  'use-media-demo': {
    name: 'use-media-demo',
    description: "use-media's hook in action.",
    type: 'registry:example',
    registryDependencies: ['https://h3-use.com/r/use-media.json'],
    files: [
      {
        path: 'registry/example/use-media-demo.tsx',
        type: 'registry:example',
        target: 'components/example/use-media-demo.tsx',
      },
    ],
    component: React.lazy(async () => {
      const mod = await import('@/registry/example/use-media-demo.tsx');
      const exportName =
        Object.keys(mod).find(
          (key) =>
            typeof mod[key] === 'function' || typeof mod[key] === 'object',
        ) || item.name;
      return { default: mod.default || mod[exportName] };
    }),
    meta: undefined,
  },
  'use-mouse-demo': {
    name: 'use-mouse-demo',
    description: "use-mouse's hook in action.",
    type: 'registry:example',
    registryDependencies: ['https://h3-use.com/r/use-mouse.json'],
    files: [
      {
        path: 'registry/example/use-mouse-demo.tsx',
        type: 'registry:example',
        target: 'components/example/use-mouse-demo.tsx',
      },
    ],
    component: React.lazy(async () => {
      const mod = await import('@/registry/example/use-mouse-demo.tsx');
      const exportName =
        Object.keys(mod).find(
          (key) =>
            typeof mod[key] === 'function' || typeof mod[key] === 'object',
        ) || item.name;
      return { default: mod.default || mod[exportName] };
    }),
    meta: undefined,
  },
  'use-keypress-demo': {
    name: 'use-keypress-demo',
    description: "use-keypress's hook in action.",
    type: 'registry:example',
    registryDependencies: ['https://h3-use.com/r/use-keypress.json'],
    files: [
      {
        path: 'registry/example/use-keypress-demo.tsx',
        type: 'registry:example',
        target: 'components/example/use-keypress-demo.tsx',
      },
    ],
    component: React.lazy(async () => {
      const mod = await import('@/registry/example/use-keypress-demo.tsx');
      const exportName =
        Object.keys(mod).find(
          (key) =>
            typeof mod[key] === 'function' || typeof mod[key] === 'object',
        ) || item.name;
      return { default: mod.default || mod[exportName] };
    }),
    meta: undefined,
  },
  'use-orientation-demo': {
    name: 'use-orientation-demo',
    description: "use-orientation's hook in action.",
    type: 'registry:example',
    registryDependencies: ['https://h3-use.com/r/use-orientation.json'],
    files: [
      {
        path: 'registry/example/use-orientation-demo.tsx',
        type: 'registry:example',
        target: 'components/example/use-orientation-demo.tsx',
      },
    ],
    component: React.lazy(async () => {
      const mod = await import('@/registry/example/use-orientation-demo.tsx');
      const exportName =
        Object.keys(mod).find(
          (key) =>
            typeof mod[key] === 'function' || typeof mod[key] === 'object',
        ) || item.name;
      return { default: mod.default || mod[exportName] };
    }),
    meta: undefined,
  },
  'use-toggle-demo': {
    name: 'use-toggle-demo',
    description: "use-toggle's hook in action.",
    type: 'registry:example',
    registryDependencies: ['https://h3-use.com/r/use-toggle.json'],
    files: [
      {
        path: 'registry/example/use-toggle-demo.tsx',
        type: 'registry:example',
        target: 'components/example/use-toggle-demo.tsx',
      },
    ],
    component: React.lazy(async () => {
      const mod = await import('@/registry/example/use-toggle-demo.tsx');
      const exportName =
        Object.keys(mod).find(
          (key) =>
            typeof mod[key] === 'function' || typeof mod[key] === 'object',
        ) || item.name;
      return { default: mod.default || mod[exportName] };
    }),
    meta: undefined,
  },
  'use-set-demo': {
    name: 'use-set-demo',
    description: "use-set's hook in action.",
    type: 'registry:example',
    registryDependencies: ['https://h3-use.com/r/use-set.json'],
    files: [
      {
        path: 'registry/example/use-set-demo.tsx',
        type: 'registry:example',
        target: 'components/example/use-set-demo.tsx',
      },
    ],
    component: React.lazy(async () => {
      const mod = await import('@/registry/example/use-set-demo.tsx');
      const exportName =
        Object.keys(mod).find(
          (key) =>
            typeof mod[key] === 'function' || typeof mod[key] === 'object',
        ) || item.name;
      return { default: mod.default || mod[exportName] };
    }),
    meta: undefined,
  },
  'use-local-storage-demo': {
    name: 'use-local-storage-demo',
    description: "use-local-storage's hook in action.",
    type: 'registry:example',
    registryDependencies: ['https://h3-use.com/r/use-local-storage.json'],
    files: [
      {
        path: 'registry/example/use-local-storage-demo.tsx',
        type: 'registry:example',
        target: 'components/example/use-local-storage-demo.tsx',
      },
    ],
    component: React.lazy(async () => {
      const mod = await import('@/registry/example/use-local-storage-demo.tsx');
      const exportName =
        Object.keys(mod).find(
          (key) =>
            typeof mod[key] === 'function' || typeof mod[key] === 'object',
        ) || item.name;
      return { default: mod.default || mod[exportName] };
    }),
    meta: undefined,
  },
  'use-session-storage-demo': {
    name: 'use-session-storage-demo',
    description: "use-session-storage's hook in action.",
    type: 'registry:example',
    registryDependencies: ['https://h3-use.com/r/use-session-storage.json'],
    files: [
      {
        path: 'registry/example/use-session-storage-demo.tsx',
        type: 'registry:example',
        target: 'components/example/use-session-storage-demo.tsx',
      },
    ],
    component: React.lazy(async () => {
      const mod = await import(
        '@/registry/example/use-session-storage-demo.tsx'
      );
      const exportName =
        Object.keys(mod).find(
          (key) =>
            typeof mod[key] === 'function' || typeof mod[key] === 'object',
        ) || item.name;
      return { default: mod.default || mod[exportName] };
    }),
    meta: undefined,
  },
};
