---
description: 
globs: 
alwaysApply: false
---
# Guide for Creating Hooks in h3-use

This guide provides a complete step-by-step process for creating new hooks following the project's pattern.

## File Structure

### 1. Hook File

Create in `@/registry/hooks/use-{name}.tsx`:

```typescript
"use client";

import { useCallback, useState } from "react";

// Types
interface Props {}
interface Return {}

export function useHook(): Return {
  // Implementation
}
```

### 2. Example File

Create in `@/registry/example/use-{name}-demo.tsx`:

```typescript
"use client";

import React from "react";
import { ShadcnComponents } from "@/components/ui/...";
```

### 3. Documentation File

Create in `@/content/docs/hooks/use-{name}.mdx`:

````markdown
---
title: useHook
date: YYYY-MM-DD
description: Hook description
author: h3rmel
published: true
---

<HookPreview name="use-{name}-demo" />

## Installation

<Tabs defaultValue="cli">

<TabsList>
  <TabsTrigger value="cli">CLI</TabsTrigger>
  <TabsTrigger value="manual">Manual</TabsTrigger>
</TabsList>
<TabsContent value="cli">

```bash
npx shadcn@latest add "https://h3-use.com/r/use-{name}"
```

</TabsContent>
<TabsContent value="manual">

<Steps>

<Step>Copy and paste the following code into your project.</Step>

<HookSource name="use-{name}" />

<Step>Update the import paths to match your project setup.</Step>

</Steps>

</TabsContent>

</Tabs>

## Props

| Prop       | Type                   | Default   | Description                                 |
| ---------- | ---------------------- | --------- | ------------------------------------------- |
| `propName` | `Type`                 | `default` | Description of the prop                     |

### Options

If the hook has configuration options, document them here:

| Prop       | Type                   | Default   | Description                                 |
| ---------- | ---------------------- | --------- | ------------------------------------------- |
| `option`   | `Type`                 | `default` | Description of the option                   |

## Data

The hook returns an object with the following properties:

| Property   | Type       | Description                                  |
| ---------- | ---------- | -------------------------------------------- |
| `property` | `Type`     | Description of the returned property         |

## Key Features & Details

### Browser Support

Document browser support if relevant:

- Chrome: Support status
- Firefox: Support status
- Safari: Support status
- Edge: Support status
- Opera: Support status

### Cross-Browser Compatibility

- List of cross-browser considerations
- How the hook handles different browsers
- Any fallbacks or polyfills used

### Performance Considerations

- Performance implications
- Memory usage
- Cleanup requirements
- Optimization tips

### Best Practices & Caveats

1. First best practice
2. Second best practice
3. Third best practice
4. Fourth best practice
5. Fifth best practice

## Examples

### Basic Usage

```tsx
// Basic usage example
```

### Advanced Usage

```tsx
// Advanced usage example
```

### With Options

```tsx
// Example with options
```

## Related

- [Related Documentation Link](mdc:https:/example.com)
- [Related API Documentation](mdc:https:/example.com)
````

## Required Updates

### 1. Hook Registry

Update `@/registry/hooks`:

```typescript
{
  name: 'use-hook',
  type: 'registry:hook',
  title: 'UseHook',
  description: 'Description',
  files: [{
    path: 'registry/hooks/use-hook.tsx',
    type: 'registry:hook',
    target: 'hooks/h3-use/use-hook.tsx',
  }],
  categories: ['category'],
}
```

### 2. Example Registry

Update `@/registry/registry-examples.ts`:

```typescript
{
  name: 'use-hook-demo',
  type: 'registry:example',
  title: 'UseHookDemo',
  description: "use-hook's hook in action.",
  registryDependencies: [
    'used-components',
    'https://h3-use.com/r/use-hook.json',
  ],
  files: [{
    path: 'registry/example/use-hook-demo.tsx',
    type: 'registry:example',
    target: 'components/example/use-hook-demo.tsx',
  }],
}
```

### 3. Documentation Sidebar

Update `@/config/docs.ts` adding to the appropriate category:

```typescript
{
  title: 'use-hook',
  href: '/docs/hooks/use-hook',
}
```

## Available Categories

- `ui-and-dom`: Hooks related to UI and DOM manipulation
- `state-management`: Hooks for state management
- `utilities`: Utility hooks
- `lifecycle`: Component lifecycle related hooks

## Implementation Checklist

### Hook

- [ ] Use 'use client'
- [ ] Implement with TypeScript
- [ ] Use useCallback for functions
- [ ] Use useRef for callbacks
- [ ] Ensure type-safety
- [ ] Optimize performance
- [ ] Follow React best practices
- [ ] Follow Clean Code principles

### Example

- [ ] Use Shadcn/ui components
- [ ] Use Tailwind CSS
- [ ] Demonstrate all features
- [ ] Use @/ imports
- [ ] Add necessary comments

### Documentation

- [ ] Complete frontmatter
- [ ] Hook preview
- [ ] Installation instructions
- [ ] Props table
- [ ] Options table (if applicable)
- [ ] Return value table
- [ ] Key features and details
- [ ] Browser support (if applicable)
- [ ] Performance considerations
- [ ] Best practices
- [ ] Usage examples
- [ ] Related resources

## Build and Verification

After all changes, run:

```bash
pnpm build:registry
pnpm build:docs
```

## Reference Examples

- Hook: [use-notifications.tsx](mdc:registry/hooks/use-notifications.tsx)
- Example: [use-notifications-demo.tsx](mdc:registry/example/use-notifications-demo.tsx)
- Documentation: [use-notifications.mdx](mdc:content/docs/hooks/use-notifications.mdx)
